<?xml version="1.0" encoding="utf-8" ?>
<contract xmlns="urn:nf:iot:leg:sc:1.0"
          id="OpenVoteYesNoAbstain"
          archiveOpt="P2Y"
          archiveReq="P5Y"
          canActAsTemplate="true"
          duration="P1Y"
          visibility="PublicSearchable">
	<Create xmlns="https://paiwise.tagroot.io/Schema/NeuroFeatures.xsd">
		<TokenID>
			<Unique/>
		</TokenID>
		<Creator>
			<RoleReference role="Creator"/>
		</Creator>
		<Owner>
			<RoleReference role="Creator"/>
		</Owner>
		<Certifier>
			<RoleReference role="Certifier"/>
		</Certifier>
		<TrustProvider>
			<RoleReference role="TrustProvider"/>
		</TrustProvider>
		<Value>
			<Number>1</Number>
		</Value>
		<Currency>
			<String>TST</String>
		</Currency>
		<CommissionPercent>
			<Number>0</Number>
		</CommissionPercent>
		<Expires>
			<ParameterReference parameter="Expires"/>
		</Expires>
		<CreatorCanDestroy>
			<Boolean>false</Boolean>
		</CreatorCanDestroy>
		<OwnerCanDestroyBatch>
			<Boolean>false</Boolean>
		</OwnerCanDestroyBatch>
		<OwnerCanDestroyIndividual>
			<Boolean>false</Boolean>
		</OwnerCanDestroyIndividual>
		<CertifierCanDestroy>
			<Boolean>true</Boolean>
		</CertifierCanDestroy>
		<Definition>
			<StateMachine xmlns="https://paiwise.tagroot.io/Schema/StateMachines.xsd" startState="Created">
				<Variable id="NrBallotsTotal">
					<Number>0</Number>
				</Variable>
				<Variable id="NrBallotsAccepted">
					<Number>0</Number>
				</Variable>
				<Variable id="NrBallotsRejected">
					<Number>0</Number>
				</Variable>
				<Variable id="NrChanged">
					<Number>0</Number>
				</Variable>
				<Variable id="Votes">
					<Calc>
						<![CDATA[
						{
							"Yes":0,
							"No":0,
							"Abstain":0
						}
						]]>
					</Calc>
				</Variable>
				<Variable id="Voters">
					<Calc>{}</Calc>
				</Variable>
				<Variable id="NrYes">
					<Number>0</Number>
				</Variable>
				<Variable id="NrNo">
					<Number>0</Number>
				</Variable>
				<Variable id="NrAbstain">
					<Number>0</Number>
				</Variable>
				<Variable id="Comments">
					<Calc>{}</Calc>
				</Variable>
				<Variable id="NrComments">
					<Number>0</Number>
				</Variable>
				<Variable id="Question">
					<TagReference tag="Question"/>
				</Variable>
				<Variable id="ChangeVoteAllowed">
					<TagReference tag="ChangeVoteAllowed"/>
				</Variable>
				<Variable id="LedgerCollection">
					<TagReference tag="LedgerCollection"/>
				</Variable>
				<Variable id="VoteContractId">
					<TokenProperty>CreationContract</TokenProperty>
				</Variable>
				<Variable id="VoteTokenId">
					<TokenProperty>TokenId</TokenProperty>
				</Variable>
				<Variable id="From">
					<TagReference tag="From"/>
				</Variable>
				<Variable id="To">
					<TagReference tag="To"/>
				</Variable>
				<Variable id="Expires">
					<TagReference tag="Expires"/>
				</Variable>
				<Variable id="IsOpen">
					<Boolean>false</Boolean>
				</Variable>
				<Variable id="TimeLeftLabel">
					<String></String>
				</Variable>
				<State id="Created">
					<OnEvent newState="Open">
						<OnDateTime timeCoordinates="UTC">{From}</OnDateTime>
					</OnEvent>
					<OnEvent actionRef="CheckTimeToOpen">
						<OnDuration>PT1S</OnDuration>
					</OnEvent>
					<OnEvent actionRef="DiscardBallotVotingNotOpened">
						<OnContractSigned contractIdVariable="ContractId"
															parametersVariable="ContractParameters"
															rolesVariable="ContractRoles"
															machineReadableVariable="Ballot"
															localName="Ballot"
															namespace="https://paiwise.tagroot.io/Schema/OpenVote.xsd"/>
					</OnEvent>
				</State>
				<State id="Open">
					<OnEnter actionRef="SetIsOpen"/>
					<OnEvent newState="Closed">
						<OnDateTime timeCoordinates="UTC">{To}</OnDateTime>
					</OnEvent>
					<OnEvent actionRef="CheckTimeToClose">
						<OnDuration>PT1S</OnDuration>
					</OnEvent>
					<OnEvent actionRef="ProcessBallot">
						<OnContractSigned contractIdVariable="ContractId"
															parametersVariable="ContractParameters"
															rolesVariable="ContractRoles"
															machineReadableVariable="Ballot"
															localName="Ballot"
															namespace="https://paiwise.tagroot.io/Schema/OpenVote.xsd"/>
					</OnEvent>
				</State>
				<State id="Closed">
					<OnEnter actionRef="SetIsClosed"/>
					<OnEvent newState="Terminated">
						<OnDateTime timeCoordinates="UTC">{Expires}</OnDateTime>
					</OnEvent>
					<OnEvent actionRef="DiscardBallotVotingClosed">
						<OnContractSigned contractIdVariable="ContractId"
															parametersVariable="ContractParameters"
															rolesVariable="ContractRoles"
															machineReadableVariable="Ballot"
															localName="Ballot"
															namespace="https://paiwise.tagroot.io/Schema/OpenVote.xsd"/>
					</OnEvent>
				</State>
				<State id="Terminated">
					<OnEnter actionRef="End"/>
				</State>
				<Action id="SetIsOpen">
					<PersistVariable name="IsOpen" value="{true}"/>
				</Action>
				<Action id="SetIsClosed">
					<PersistVariable name="IsOpen" value="{false}"/>
				</Action>
				<Action id="ProcessBallot">
					<If condition="ContractParameters.VoteReference=VoteContractId">
						<Then>
							<PersistVariable name="NrBallotsTotal" value="{NrBallotsTotal+1}"/>
							<Try>
								<If condition="!exists(ContractRoles.Voter) || count(ContractRoles.Voter)!=1">
									<Then>
										<Error reason="Ballot does not have a unique voter identified."/>
									</Then>
								</If>
								<If condition="!exists(ContractParameters.Country) || !exists(ContractParameters.PersonalNumber)">
									<Then>
										<Error reason="Voter personal number and country are not properly identified."/>
									</Then>
								</If>
								<Script>
									<![CDATA[
									Key:=ContractParameters.Country+"|"+ContractParameters.PersonalNumber;
									VoterId:=ContractRoles.Voter[0];
									]]>
								</Script>
								<If condition="exists(PrevVote:=Voters[Key])">
									<Then>
										<If condition="!ChangeVoteAllowed">
											<Then>
												<Error reason="Voter has already voted."/>
											</Then>
										</If>
										<If condition="VoterId!=PrevVote.voterId">
											<Then>
												<Error reason="Voter has already voted, using a different digital identity. A vote can only be changed using the same digital identity."/>
											</Then>
										</If>
										<Fail contractId="{PrevVote.ballot}" reason="Voter is changing vote."/>
										<PersistVariable>
											<Name>
												<Calc>'Nr'+PrevVote.vote</Calc>
											</Name>
											<Value>
												<Calc>eval('Nr'+PrevVote.vote)-1</Calc>
											</Value>
										</PersistVariable>
										<PersistVariable name="Votes" value="{Votes[SelectedOption]:=Votes[SelectedOption]-1;Votes}"/>
										<PersistVariable name="Voters" value="{Voters[Key]:=null;Voters}"/>
										<PersistVariable name="NrChanged" value="{NrChanged+1}"/>
										<CreateEntry type="BallotRevoked" collection="{LedgerCollection}">
											<Property key="Ballot" value="{PrevVote.ballot}"/>
											<Property key="VoterId" value="{PrevVote.voterId}"/>
											<Property key="VoterPersonalNumber" value="{ContractParameters.PersonalNumber}"/>
											<Property key="VoterCountry" value="{ContractParameters.Country}"/>
											<Property key="VoterFullName" value="{ContractParameters.FullName}"/>
											<Property key="VoteCast" value="{PrevVote.vote}"/>
											<Property key="VoteContractId" value="{VoteContractId}"/>
											<Property key="VoteTokenId" value="{VoteTokenId}"/>
										</CreateEntry>
									</Then>
								</If>
								<Script>
									<![CDATA[
									Options:=SelectXml(Ballot,"/default:Ballot/default:Option");

									InvalidOptions:=false;
									InvalidParameterValue:=false;
									MultipleSelected:=false;
									SelectedOption:=null;

									foreach Option in Options do
									(
										Parameter:=SelectXml(Option,"@parameter");
										Value:=SelectXml(Option,"@value");
							
										if !exists(ContractParameters[Parameter]) then
											InvalidParameterValue:=true
										else if !exists(Votes[Value]) then
											InvalidOptions:=true
										else
										(
											ParameterValue:=ContractParameters[Parameter];
											if ParameterValue matches Boolean(ParameterSelection) then
											(
												if ParameterSelection then 
												(
													if exists(SelectedOption) then
														MultipleSelected:=true
													else
														SelectedOption:=Value;
												)
											)
											else
												InvalidParameterValue:=true
										)
									);
									]]>
								</Script>
								<If condition="InvalidOptions">
									<Then>
										<Error reason="Invalid options in ballot."/>
									</Then>
								</If>
								<If condition="InvalidParameterValue">
									<Then>
										<Error reason="Invalid parameter reference or parameter value in ballot."/>
									</Then>
								</If>
								<If condition="MultipleSelected">
									<Then>
										<Error reason="Multiple options selected in ballot."/>
									</Then>
								</If>
								<If condition="!exists(SelectedOption)">
									<Then>
										<Error reason="No selected option in ballot."/>
									</Then>
								</If>
								<PersistVariable>
									<Name>
										<Calc>'Nr'+SelectedOption</Calc>
									</Name>
									<Value>
										<Calc>eval('Nr'+SelectedOption)+1</Calc>
									</Value>
								</PersistVariable>
								<PersistVariable name="Votes" value="{Votes[SelectedOption]:=Votes[SelectedOption]+1;Votes}"/>
								<PersistVariable name="Voters">
									<Value>
										<Calc>
											<![CDATA[
											Voters[Key]:=
											{
												'ballot':ContractId,
												'voterId':VoterId,
												'vote':SelectedOption
											};
											Voters
											]]>
										</Calc>
									</Value>
								</PersistVariable>
								<PersistVariable name="NrBallotsAccepted" value="{NrBallotsAccepted+1}"/>
								<CreateEntry type="BallotCounted" collection="{LedgerCollection}">
									<Property key="Ballot" value="{ContractId}"/>
									<Property key="VoterId" value="{VoterId}"/>
									<Property key="VoterPersonalNumber" value="{ContractParameters.PersonalNumber}"/>
									<Property key="VoterCountry" value="{ContractParameters.Country}"/>
									<Property key="VoterFullName" value="{ContractParameters.FullName}"/>
									<Property key="VoteCast" value="{SelectedOption}"/>
									<Property key="VoteContractId" value="{VoteContractId}"/>
									<Property key="VoteTokenId" value="{VoteTokenId}"/>
								</CreateEntry>
								<If condition="exists(Comment:=ContractParameters.Comment) and !empty(Comment)">
									<Then>
										<Script>
											<![CDATA[
											if !exists(Nr:=Comments[Comment]) then Nr:=0;
											]]>
										</Script>
										<PersistVariable name="Comments" value="{Comments[Comment]:=Nr+1;Comments}"/>
										<CreateEntry type="CommentReceived" collection="{LedgerCollection}">
											<Property key="Ballot" value="{ContractId}"/>
											<Property key="VoterId" value="{VoterId}"/>
											<Property key="VoterPersonalNumber" value="{ContractParameters.PersonalNumber}"/>
											<Property key="VoterCountry" value="{ContractParameters.Country}"/>
											<Property key="VoterFullName" value="{ContractParameters.FullName}"/>
											<Property key="Comment" value="{Comment}"/>
											<Property key="VoteContractId" value="{VoteContractId}"/>
											<Property key="VoteTokenId" value="{VoteTokenId}"/>
										</CreateEntry>
									</Then>
								</If>
								<Catch exceptionVariable="ex">
									<PersistVariable name="NrBallotsRejected" value="{NrBallotsRejected+1}"/>
									<Fail reason="{ex.Message}" contractId="{ContractId}"/>
									<CreateEntry type="BallotRejected" collection="{LedgerCollection}">
										<Property key="Ballot" value="{ContractId}"/>
										<Property key="Reason" value="{ex.Message}"/>
									</CreateEntry>
								</Catch>
							</Try>
						</Then>
					</If>
				</Action>
				<Action id="DiscardBallotVotingNotOpened">
					<If condition="ContractParameters.VoteReference=VoteContractId">
						<Then>
							<Fail reason="Ballot discarded. Voting has not started." contractId="{ContractId}"/>
						</Then>
					</If>
				</Action>
				<Action id="DiscardBallotVotingClosed">
					<If condition="ContractParameters.VoteReference=VoteContractId">
						<Then>
							<Fail reason="Ballot discarded. Voting has closed." contractId="{ContractId}"/>
						</Then>
					</If>
				</Action>
				<Action id="End">
					<End/>
				</Action>
				<Action id="FunctionDefinitions">
					<Script>
						<![CDATA[
						CalcTimeLeft(TimeLeft):=
						(
							NrDays:=Days(TimeLeft);
	
							if (NrDays>2) then
								[round(NrDays),"days",NowUtc+TimeSpan(1,0,0)]
							else
							(
								NrHours:=Hours(TimeLeft);
								if (NrHours>2) then
									[round(NrHours),"hours",NowUtc+TimeSpan(0,5,0)]
								else
								(
									NrMinutes:=Minutes(TimeLeft);
									if (NrMinutes>2) then
										[round(NrMinutes),"minutes",NowUtc+TimeSpan(0,1,0)]
									else
									(
										NrSeconds:=Seconds(TimeLeft);
										[round(NrSeconds),"seconds",NowUtc+TimeSpan(0,0,1)]
									)
								)
							)
						);

						CalcTimeLeftLabel(TimeLeft):=
						(
							[Nr,Unit,NextTimeCheck]:=CalcTimeLeft(TimeLeft);
							Str(Nr)+" "+Unit;
						);

						OutputTimeLeft(TimeLeft):=
						(
							Label:=CalcTimeLeftLabel(TimeLeft);
							]]((Label))[[
						);
						]]>
					</Script>
				</Action>
				<Action id="CheckTimeToOpen">
					<CallAction actionRef="FunctionDefinitions"/>
					<PersistVariable name="TimeLeftLabel" value="{CalcTimeLeftLabel(From-NowUtc)}" onlyIfChanged="true"/>
				</Action>
				<Action id="CheckTimeToClose">
					<CallAction actionRef="FunctionDefinitions"/>
					<PersistVariable name="TimeLeftLabel" value="{CalcTimeLeftLabel(To-NowUtc)}" onlyIfChanged="true"/>
				</Action>
				<ReportPresent>
					<![CDATA[
Current Voting Status
========================

{{Question}}

{{
CallAction("FunctionDefinitions");

if IsOpen then
(
	]]Voting is **open**, and will be closed in [[;
	OutputTimeLeft(To-NowUtc);
	]].[[
)
else if NowUtc < From then
(
	]]Voting has not started yet. It will begin in **[[;
	OutputTimeLeft(From-NowUtc);
	]]**.[[
)
else
		]]Voting is **closed**.[[}}

| Ballot Counts                           ||
|------------------|----------------------:|
| Total Ballots    | {{NrBallotsTotal}}    |
| Accepted Ballots | {{NrBallotsAccepted}} |
| Rejected Ballots | {{NrBallotsRejected}} |

| Vote Counts                             ||
|------------------|----------------------:|
| **Yes** votes    | **{{NrYes}}**         |
| **No** votes     | **{{NrNo}}**          |
| Abstained        | {{NrAbstain}}         |
| Changed votes    | {{NrChanged}}         |

| Comments Received                       ||
|------------------|----------------------:|
| Total Comments   | {{NrComments}}        |
{{foreach Comment in Comments do 
	]]| ((MarkdownEncode(Comment.Key) )) | ((Comment.Value)) |
[[;}}
					]]>
				</ReportPresent>
				<ReportHistory>
					<![CDATA[
Voting history
=================

]]>
				</ReportHistory>
			</StateMachine>
		</Definition>
		<Tag name="Question">
			<ParameterReference parameter="Question"/>
		</Tag>
		<Tag name="ChangeVoteAllowed">
			<ParameterReference parameter="ChangeVoteAllowed"/>
		</Tag>
		<Tag name="LedgerCollection">
			<ParameterReference parameter="LedgerCollection"/>
		</Tag>
		<Tag name="From">
			<ParameterReference parameter="From"/>
		</Tag>
		<Tag name="To">
			<ParameterReference parameter="To"/>
		</Tag>
		<Tag name="Expires">
			<ParameterReference parameter="Expires"/>
		</Tag>
		<FriendlyName>
			<String>Open Vote</String>
		</FriendlyName>
		<Category>
			<String>Voting</String>
		</Category>
		<Description>
			<String>Example token used to demonstrate how to implement an open and transparent voting system.</String>
		</Description>
		<Glyph contentType="image/png">iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAABHNCSVQICAgIfAhkiAAABFFJREFUeJztWU1IMlsYfrqTFmgLIb5yEURlLQo3YVZUCi1qFUFQUKt2QURWm7IgIkhqJ9IP1EIIWkWuIugPLIh0GVFUBC5SocCkEM2/uYvv3oPDNNM43Thwv3lgYM77d57zeI7nzEwBy7Is/mD8RZsAbSgC0CZAG4oAtAnQhiIAbQK0oQhAmwBtKALQJkAbigC0CdCGIgBtArShCECbAG0oAtAmQBuKALQJ0EahkCMYDGJpaQklJSV5F43H4+jr60NHRwfPNz8/j3g8jmw2i5qaGoyMjORdHwBSqRScTicODg5wfX2N19dXqNVqVFRUoLGxET09Pejv7/+6ECsAn8/HApB9LS4u8mo+PT3x4vJFJpNh29vbJfPY2dkRrSe4BL77uSCTyfBs4+PjPNvCwoLkmqenp2AYBufn55JzHh8fRf0FQh9G3t7ecHx8jOLiYo69tLQUZrOZtLe3t/Hr1y+k02liSyaTMBqNqKqq4nZWUAAA0Gg0iMVixC5FbK/XC6vVyrE1Nzdjbm4O3d3dYBiG2O/v77G7u4vZ2VlMT0/D4XAIF857Dv5mS65oNCopx+FwkBy73c5arVbS3t/fz6tPAOzt7a2kfgOBgHhdSVVEyITD4bxzYrEYe3R0RNoGg0E0d2BggJOfTCbl0P6cl6ykPAXIHWx1dfWndV5eXiT153K55FAWri0rKU8BGhoaSLzH4yF2u91O7ENDQ5/mer3eb+0aX+HHBYhGo6ID+GpwKysrxF9fXy+Hrih+/CRos9nI/dTUFM+fe1hyOp08fygUIvcGg0Fyv3V1dWhtbYXJZBIPlKMa8pgBubHpdJrn9/v9xM8wDM9vs9mIv7e3VxZHMfzoDFhdXSX3FouFs1f/C5PJBI1GA+D34eni4oLjLysrI/eBQOA/5yh4EBJN+udAAwDhcBjl5eWfxhUVFSGZTAIAlpeX0dbWhkQiwYnRarXY2trC5uYmAKCpqQk+n4/4Dw8P0dXVRdpS6eZyFM2RPKcEppfQEri8vJT9HPHx8SHY397eXt4cReOkDVm4uJAALS0tsgUYHR3l1LJYLHlvhVLjf2QJpNNpqFQq0na73UilUoJTkWEYPD8/Y2ZmhthyY6PRKHQ6HWmr1WrEYjEUFgo+zdNdAmNjY8RvNpsl19VqtSTP7XZzfGtra7yZMjg4yPr9fl4dj8dDdwnk+s/OziTXXV9fJ3k6nY7ndzqdspaU6Fgks8tNyikeDAY5PpfL9a2ja27uZ79uKBRia2trJQ++srJStD/hRSSCiYkJqFQqvL+/816ZJRIJTE5OIpvNcrYvqXC73bi6ukI2m8XDwwPvJKfX63F3d4dIJIKNjQ2cnJzg5uYGkUgEDMNAr9fDaDSis7MTw8PD5IwhBFl/gv8n/PFvhRUBaBOgDUUA2gRoQxGANgHaUASgTYA2FAFoE6ANRQDaBGhDEYA2AdpQBKBNgDYUAWgToA1FANoEaONve9o8PVvYS2AAAAAASUVORK5CYII=</Glyph>
	</Create>
	<role name="Creator" minCount="1" maxCount="1">
		<description xml:lang="en">
			<paragraph>
				<text>Creator of the open vote.</text>
			</paragraph>
		</description>
	</role>
	<role name="Certifier" minCount="1" maxCount="1">
		<description xml:lang="en">
			<paragraph>
				<text>Certifier of the vote. Apart from certifying the correctness of the vote, the certifier is empowered to cancel or disqualify a vote.</text>
			</paragraph>
		</description>
	</role>
	<role name="TrustProvider" minCount="1" maxCount="1">
		<description xml:lang="en">
			<paragraph>
				<text>The part that acts as a host of the voting, approves its creation and validates all digital signatures.</text>
			</paragraph>
		</description>
	</role>
	<parts>
		<templateOnly/>
	</parts>
	<parameters>
		<stringParameter name="Question" guide="Question" minLength="1">
			<description xml:lang="en">
				<paragraph>
					<text>Question to be voted on.</text>
				</paragraph>
			</description>
		</stringParameter>
		<booleanParameter name="ChangeVoteAllowed" guide="If a voter is allowed to change its vote." value="true">
			<description xml:lang="en">
				<paragraph>
					<text>Voters are allowed to change their votes while vote is open.</text>
				</paragraph>
			</description>
		</booleanParameter>
		<stringParameter name="LedgerCollection" guide="Ledger Collection Name." value="OpenVote" minLength="1">
			<description xml:lang="en">
				<paragraph>
					<text>Neuro-Ledger collection to receive annotated events documenting the voting process.</text>
				</paragraph>
			</description>
		</stringParameter>
		<dateTimeParameter name="From" guide="When voting is opened (UTC)." exp="From&gt;=NowUtc">
			<description xml:lang="en">
				<paragraph>
					<text>When the voting is opened (UTC).</text>
				</paragraph>
			</description>
		</dateTimeParameter>
		<dateTimeParameter name="To" guide="When voting is closed (UTC)." exp="To&gt;From and To&lt;=(From+TimeSpan(31,0,0,0))">
			<description xml:lang="en">
				<paragraph>
					<text>When the voting is closed (UTC).</text>
				</paragraph>
			</description>
		</dateTimeParameter>
		<dateParameter name="Expires" guide="Expiry date" exp="Expires&gt;To">
			<description xml:lang="en">
				<paragraph>
					<text>When token expires.</text>
				</paragraph>
			</description>
		</dateParameter>
	</parameters>
	<humanReadableText xml:lang="en">
		<section>
			<header>
				<text>Open voting</text>
			</header>
			<body>
				<paragraph>
					<text>This contract creates an open vote, where anyone with a </text>
					<italic>
						<text>Neuro-Access</text>
					</italic>
					<text> digital identity can participate. Each participant has at most one vote. Ballots are open, and can be seen by other participants.</text>
				</paragraph>
				<section>
					<header>
						<text>Casting Ballot</text>
					</header>
					<body>
						<paragraph>
							<text>Each participant votes by signing an individual ballot contract. In the contract, they will have to answer the question </text>
							<bold>
								<parameter name="Question"/>
							</bold>
							<text>, by choosing one of the three options: </text>
							<bold>
								<text>Yes</text>
							</bold>
							<text>, </text>
							<bold>
								<text>No</text>
							</bold>
							<text>, or </text>
							<bold>
								<text>Abstain</text>
							</bold>
							<text>.</text>
						</paragraph>
					</body>
				</section>
				<section>
					<header>
						<text>Changing Votes</text>
					</header>
					<body>
						<paragraph>
							<parameter name="ChangeVoteAllowed"/>
							<text> Participants are allowed to change votes.</text>
						</paragraph>
						<paragraph>
							<text>In case the vote allows participants to change their vote, they need to cast a new ballot. If changing votes is accepted, the previously counted ballot will be rejected, and the new ballot counted. If changing the vote is not allowed, the new ballot will be automatically rejected. Changing votes can only be done while the vote is open, and only by using the same digital identity as the one casting the original ballot being changed.</text>
						</paragraph>
					</body>
				</section>
				<section>
					<header>
						<text>Comments and Feedback</text>
					</header>
					<body>
						<paragraph>
							<text>When casting a vote, the person will also have the opportunity to provide a personal comment for open review. Providing feedback is optional.</text>
						</paragraph>
					</body>
				</section>
				<section>
					<header>
						<text>Time and Duration</text>
					</header>
					<body>
						<paragraph>
							<text>The Voting is open between </text>
							<bold>
								<parameter name="From"/>
							</bold>
							<text> (UTC) and </text>
							<bold>
								<parameter name="To"/>
							</bold>
							<text> (UTC). The vote machine will present results until </text>
							<bold>
								<parameter name="Expires"/>
							</bold>
							<text>, after which it will expire.</text>
						</paragraph>
					</body>
				</section>
				<section>
					<header>
						<text>Technical Information</text>
					</header>
					<body>
						<section>
							<header>
								<text>Ledger entries</text>
							</header>
							<body>
								<paragraph>
									<text>During the life-cycle of the voting procedure, all actions related to digital identities and smart contracts are annotated in their corresponding collections in the </text>
									<italic>
										<text>Neuro-Ledger</text>
									</italic>
									<text>. Ballot counting is furthermore annotated in the </text>
									<bold>
										<parameter name="LedgerCollection"/>
									</bold>
									<text> collection for transparency and auditability. A summary of collections in the </text>
									<italic>
										<text>Neuro-Ledger</text>
									</italic>
									<text> used during the voting procedure are:</text>
								</paragraph>
								<table>
									<row>
										<cell colSpan="2" header="true" alignment="Center">
											<italic>
												<text>Neuro-Ledger</text>
											</italic>
											<text> Collections</text>
										</cell>
									</row>
									<row>
										<cell colSpan="1" header="false" alignment="Left">
											<text>LegalIdentities</text>
										</cell>
										<cell colSpan="1" header="false" alignment="Left">
											<text>Contains entries related to digital identities, including </text>
											<italic>
												<text>Neuro-Access</text>
											</italic>
											<text> digital identities.</text>
										</cell>
									</row>
									<row>
										<cell colSpan="1" header="false" alignment="Left">
											<text>Contracts</text>
										</cell>
										<cell colSpan="1" header="false" alignment="Left">
											<text>Contains entries related to smart contracts, including the voting contract and the ballot contracts used during voting.</text>
										</cell>
									</row>
									<row>
										<cell colSpan="1" header="false" alignment="Left">
											<text>NeauroFeatureTokens</text>
										</cell>
										<cell colSpan="1" header="false" alignment="Left">
											<text>Contains information regarding </text>
											<italic>
												<text>Neuro-Feature</text>
											</italic>
											<text> tokens, including the token definition of the open voting logic.</text>
										</cell>
									</row>
									<row>
										<cell colSpan="1" header="false" alignment="Left">
											<text>StateMachines</text>
										</cell>
										<cell colSpan="1" header="false" alignment="Left">
											<italic>
												<text>State-Machine</text>
											</italic>
											<text> information is recorded in this collection. This includes the open voting process performing the ballot counting and presentation.</text>
										</cell>
									</row>
									<row>
										<cell colSpan="1" header="false" alignment="Left">
											<text>StateMachineCurrentStates</text>
										</cell>
										<cell colSpan="1" header="false" alignment="Left">
											<text>Contains current states of different </text>
											<italic>
												<text>State-Machines</text>
											</italic>
											<text>.</text>
										</cell>
									</row>
									<row>
										<cell colSpan="1" header="false" alignment="Left">
											<text>StateMachineSamples</text>
										</cell>
										<cell colSpan="1" header="false" alignment="Left">
											<text>Contains variable changes as they are persisted by </text>
											<italic>
												<text>State-Machines</text>
											</italic>
											<text>. These samples can be used to track the counting process.</text>
										</cell>
									</row>
									<row>
										<cell colSpan="1" header="false" alignment="Left">
											<parameter name="LedgerCollection"/>
										</cell>
										<cell colSpan="1" header="false" alignment="Left">
											<text>The Open Voting </text>
											<italic>
												<text>State-Machine</text>
											</italic>
											<text> records events into this collection as ballots are received and processed.</text>
										</cell>
									</row>
								</table>
							</body>
						</section>
					</body>
				</section>
			</body>
		</section>
	</humanReadableText>
</contract>