<contract archiveOpt="P2Y" archiveReq="P1Y" canActAsTemplate="true" duration="P2Y" id="DigitalSensorTwin" visibility="Public" xmlns="urn:ieee:iot:leg:sc:1.0">
	<Create xmlns="https://paiwise.tagroot.io/Schema/NeuroFeatures.xsd">
		<TokenID>
			<Random />
		</TokenID>
		<Creator>
			<RoleReference role="Creator" />
		</Creator>
		<Owner>
			<RoleReference role="Owner" />
		</Owner>
		<TrustProvider>
			<RoleReference role="TrustProvider" />
		</TrustProvider>
		<Value>
			<ParameterReference parameter="Value" />
		</Value>
		<Currency>
			<ParameterReference parameter="Currency" />
		</Currency>
		<CommissionPercent>
			<ParameterReference parameter="CommissionPercent" />
		</CommissionPercent>
		<Expires>
			<ParameterReference parameter="Expires" />
		</Expires>
		<CreatorCanDestroy>
			<Boolean>true</Boolean>
		</CreatorCanDestroy>
		<OwnerCanDestroyBatch>
			<Boolean>true</Boolean>
		</OwnerCanDestroyBatch>
		<OwnerCanDestroyIndividual>
			<Boolean>true</Boolean>
		</OwnerCanDestroyIndividual>
		<CertifierCanDestroy>
			<Boolean>true</Boolean>
		</CertifierCanDestroy>
		<Definition>
			<StateMachine startState="Active" xmlns="https://paiwise.tagroot.io/Schema/StateMachines.xsd">
				<Variable id="NodeID">
					<TagReference tag="NodeID" />
				</Variable>
				<Variable id="SourceID">
					<TagReference tag="SourceID" />
				</Variable>
				<Variable id="PartitionID">
					<TagReference tag="PartitionID" />
				</Variable>
				<Variable id="JID">
					<TagReference tag="JID" />
				</Variable>
				<Variable id="PollingInterval">
					<TagReference tag="PollingInterval" />
				</Variable>
				<Variable id="Expires">
					<TagReference tag="Expires" />
				</Variable>
				<Variable id="Error">
					<Boolean>false</Boolean>
				</Variable>
				<Variable id="ErrorMessage">
					<String></String>
				</Variable>
				<State id="Active">
					<OnEnter actionRef="PollSensor"/>
					<OnEvent actionRef="PollSensor">
						<OnDuration>{PollingInterval}</OnDuration>
					</OnEvent>
					<OnEvent actionRef="PollSensor">
						<OnXmlNote localName="Poll" namespace="https://lab.tagroot.io/Downloads/DigitalSensorTwin.xsd" />
					</OnEvent>
					<OnEvent newState="Paused">
						<OnXmlNote localName="Pause" namespace="https://lab.tagroot.io/Downloads/DigitalSensorTwin.xsd" />
					</OnEvent>
					<OnEvent newState="Done">
						<OnXmlNote localName="Terminate" namespace="https://lab.tagroot.io/Downloads/DigitalSensorTwin.xsd" />
					</OnEvent>
					<OnEvent newState="Done">
						<OnDateTime>{Expires}</OnDateTime>
					</OnEvent>
				</State>
				<State id="Paused">
					<OnEvent newState="Active">
						<OnXmlNote localName="Resume" namespace="https://lab.tagroot.io/Downloads/DigitalSensorTwin.xsd" />
					</OnEvent>
					<OnEvent newState="Done">
						<OnXmlNote localName="Terminate" namespace="https://lab.tagroot.io/Downloads/DigitalSensorTwin.xsd" />
					</OnEvent>
					<OnEvent newState="Done">
						<OnDateTime>{Expires}</OnDateTime>
					</OnEvent>
				</State>
				<State id="Done">
					<OnEnter actionRef="End" />
				</State>
				<Action id="PollSensor">
					<Try>
						<Script>
							<![CDATA[
							if !empty(JID) then
								N:=GetNode(NodeID,SourceID,PartitionID,JID)
							else if !empty(PartitionID) then
								N:=GetNode(NodeID,SourceID,PartitionID)
							else if !empty(SourceID) then
								N:=GetNode(NodeID,SourceID)
							else
								N:=GetNode(NodeID);
								
							if !exists(N) then error("Sensor not found on broker.");
							if !N.IsReadable then error("Sensor node is not readable.");
							if !(N is Waher.Things.ISensor) then error("Node is not a sensor node.");
						
							D:=ReadSensorData(N);
							
							if !D.Ok then
							(
								foreach E in D.Errors do error(E.ErrorMessage);
								error("Unable to read sensor.")
							);
							]]>
						</Script>
						<ForEach set="D.Fields" variable="F">
							<If condition="F.Value is Waher.Things.SensorData.Field">
								<!-- If multiple fields are reported using the same name, they are reported as arrays of fields, 
								     and not individual fields. By doing this check, we make sure to only persist individual fields,
										 and not arrays. -->
								<Then>
									<PersistVariable onlyIfChanged="true">
										<Name>
											<Calc>F.Value.Name</Calc>
										</Name>
										<Value>
											<Calc>F.Value.Value</Calc>
										</Value>
									</PersistVariable>
								</Then>
							</If>
						</ForEach>
						<PersistVariable name="Error" onlyIfChanged="true">
							<Value>
								<Boolean>false</Boolean>
							</Value>
						</PersistVariable>
						<PersistVariable name="ErrorMessage" onlyIfChanged="true">
							<Value>
								<String></String>
							</Value>
						</PersistVariable>
						<Catch exceptionVariable="ex">
							<LogEvent type="Critical" message="{ex.Message}"/>
							<PersistVariable name="Error" onlyIfChanged="true">
								<Value>
									<Boolean>true</Boolean>
								</Value>
							</PersistVariable>
							<PersistVariable name="ErrorMessage" onlyIfChanged="true">
								<Value>
									<Calc>ex.Message</Calc>
								</Value>
							</PersistVariable>
						</Catch>
					</Try>
				</Action>
				<Action id="End">
					<End />
				</Action>
				<ReportPresent>
					<![CDATA[
Data from sensor
-------------------

The following data is available from the sensor:

| Field | Value |
|:---------|------:|
{{foreach P in CurrentState.VariableValues??[] do
(
	s:=P.Name;
	if s!="NodeID" and s!="SourceID" and s!="PartitionID" and s!="JID" and s!="PollingInterval" and s!="Expires" and s!="Error" and s!="ErrorMessage" then
		]]| ((P.Name)) | `((
First:=true;
Rows:=Str(P.Value).Replace("\r\n","\n").Replace("\r","\n").Split("\n",System.StringSplitOptions.None);
s:="";

foreach Row in Rows do
(
	if First then First:=false else s+="<br/>";
	
	if !empty(Row) then s+="`"+Row+"`"
);

s
))` |
[[
)}}

Configuration
----------------

The following sensor configuration has been used to access the sensor data:

| Parameter    | Value             |
|:-------------|:------------------|
| Node ID      | `{{NodeID}}`      |
| Source ID    | `{{SourceID}}`    |
| Partition ID | `{{PartitionID}}` |
| JID          | `{{NodeID}}`      |

The sensor data is polled at least every {{
Append(s,s2):=empty(s)?s2:s+", "+s2;
Append(s,N,UnitSing,UnitPlur):=N=0?s:N=1?Append(s,Str(N)+" "+UnitSing):Append(s,Str(N)+" "+UnitPlur);
DurationToStr(D):=
(
	s:="";
	s:=Append(s,Years(D),"year","years");
	s:=Append(s,Months(D),"month","months");
	s:=Append(s,Days(D),"day","days");
	s:=Append(s,Hours(D),"hour","hours");
	s:=Append(s,Minutes(D),"minute","minutes");
	s:=Append(s,Seconds(D),"second","seconds");
	s
);

DurationToStr(PollingInterval)
}}, until it is manually terminated, or until {{Years(Expires)}}-{{Months(Expires)}}-{{Days(Expires)}}, 
whichever comes first.

{{if Error then ]]
Error
--------

There's currently an error reported when trying to read the sensor. The following error has been reported:

((ErrorMessage))

[[ else ]]
OK
----

There's currently no error reported.
[[}}
]]>
				</ReportPresent>
				<ReportHistory>
					<![CDATA[
Historical data
------------------
					]]>
				</ReportHistory>
			</StateMachine>
		</Definition>
		<Tag name="NodeID">
			<ParameterReference parameter="NodeID" />
		</Tag>
		<Tag name="SourceID">
			<ParameterReference parameter="SourceID" />
		</Tag>
		<Tag name="PartitionID">
			<ParameterReference parameter="PartitionID" />
		</Tag>
		<Tag name="JID">
			<ParameterReference parameter="JID" />
		</Tag>
		<Tag name="PollingInterval">
			<ParameterReference parameter="PollingInterval" />
		</Tag>
		<Tag name="Expires">
			<ParameterReference parameter="Expires" />
		</Tag>
		<FriendlyName>
			<String>Digital Sensor Twin</String>
		</FriendlyName>
		<Category>
			<String>Example</String>
		</Category>
		<Description>
			<String>
				Token representing a digital twin of a sensor. The sensor is polled using a regular interval. The twin also
				subscribes to momentary values of the sensor, if possible and supported, to receive real-time events when sensor data
				changes. Latest sensor data is presented in the present report. Historical sensor-data is available in the history
				report.
			</String>
		</Description>
		<Glyph contentType="image/png">iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAABHNCSVQICAgIfAhkiAAABFFJREFUeJztWU1IMlsYfrqTFmgLIb5yEURlLQo3YVZUCi1qFUFQUKt2QURWm7IgIkhqJ9IP1EIIWkWuIugPLIh0GVFUBC5SocCkEM2/uYvv3oPDNNM43Thwv3lgYM77d57zeI7nzEwBy7Is/mD8RZsAbSgC0CZAG4oAtAnQhiIAbQK0oQhAmwBtKALQJkAbigC0CdCGIgBtArShCECbAG0oAtAmQBuKALQJ0EahkCMYDGJpaQklJSV5F43H4+jr60NHRwfPNz8/j3g8jmw2i5qaGoyMjORdHwBSqRScTicODg5wfX2N19dXqNVqVFRUoLGxET09Pejv7/+6ECsAn8/HApB9LS4u8mo+PT3x4vJFJpNh29vbJfPY2dkRrSe4BL77uSCTyfBs4+PjPNvCwoLkmqenp2AYBufn55JzHh8fRf0FQh9G3t7ecHx8jOLiYo69tLQUZrOZtLe3t/Hr1y+k02liSyaTMBqNqKqq4nZWUAAA0Gg0iMVixC5FbK/XC6vVyrE1Nzdjbm4O3d3dYBiG2O/v77G7u4vZ2VlMT0/D4XAIF857Dv5mS65oNCopx+FwkBy73c5arVbS3t/fz6tPAOzt7a2kfgOBgHhdSVVEyITD4bxzYrEYe3R0RNoGg0E0d2BggJOfTCbl0P6cl6ykPAXIHWx1dfWndV5eXiT153K55FAWri0rKU8BGhoaSLzH4yF2u91O7ENDQ5/mer3eb+0aX+HHBYhGo6ID+GpwKysrxF9fXy+Hrih+/CRos9nI/dTUFM+fe1hyOp08fygUIvcGg0Fyv3V1dWhtbYXJZBIPlKMa8pgBubHpdJrn9/v9xM8wDM9vs9mIv7e3VxZHMfzoDFhdXSX3FouFs1f/C5PJBI1GA+D34eni4oLjLysrI/eBQOA/5yh4EBJN+udAAwDhcBjl5eWfxhUVFSGZTAIAlpeX0dbWhkQiwYnRarXY2trC5uYmAKCpqQk+n4/4Dw8P0dXVRdpS6eZyFM2RPKcEppfQEri8vJT9HPHx8SHY397eXt4cReOkDVm4uJAALS0tsgUYHR3l1LJYLHlvhVLjf2QJpNNpqFQq0na73UilUoJTkWEYPD8/Y2ZmhthyY6PRKHQ6HWmr1WrEYjEUFgo+zdNdAmNjY8RvNpsl19VqtSTP7XZzfGtra7yZMjg4yPr9fl4dj8dDdwnk+s/OziTXXV9fJ3k6nY7ndzqdspaU6Fgks8tNyikeDAY5PpfL9a2ja27uZ79uKBRia2trJQ++srJStD/hRSSCiYkJqFQqvL+/816ZJRIJTE5OIpvNcrYvqXC73bi6ukI2m8XDwwPvJKfX63F3d4dIJIKNjQ2cnJzg5uYGkUgEDMNAr9fDaDSis7MTw8PD5IwhBFl/gv8n/PFvhRUBaBOgDUUA2gRoQxGANgHaUASgTYA2FAFoE6ANRQDaBGhDEYA2AdpQBKBNgDYUAWgToA1FANoEaONve9o8PVvYS2AAAAAASUVORK5CYII=</Glyph>
	</Create>
	<role maxCount="1" minCount="1" name="Creator">
		<description xml:lang="en">
			<paragraph>
				<text>The part that creates the </text>
				<italic>
					<text>Digital Sensor Twin</text>
				</italic>
				<text> token and the corresponding state-machine that protects the sensor data.</text>
			</paragraph>
		</description>
	</role>
	<role maxCount="1" minCount="1" name="Owner">
		<description xml:lang="en">
			<paragraph>
				<text>The owner of the token, and person that can view the data collected by the </text>
				<italic>
					<text>Digital Sensor Twin</text>
				</italic>
				<text>.</text>
			</paragraph>
		</description>
	</role>
	<role maxCount="1" minCount="1" name="TrustProvider">
		<description xml:lang="en">
			<paragraph>
				<text>The part that acts as a host of the token and approves its creation.</text>
			</paragraph>
		</description>
	</role>
	<parts>
		<templateOnly />
	</parts>
	<parameters>
		<stringParameter name="NodeID" guide="Node ID" minLength="1">
			<description xml:lang="en">
				<paragraph>
					<text>The ID of the node, that implements the live connection with the underlying sensor.</text>
				</paragraph>
			</description>
		</stringParameter>
		<stringParameter name="SourceID" guide="Source ID" value="MeteringTopology">
			<description xml:lang="en">
				<paragraph>
					<text>Optional ID of source hosting the node that implements the live connection with the underlying sensor.</text>
				</paragraph>
			</description>
		</stringParameter>
		<stringParameter name="PartitionID" guide="Partition ID" value="">
			<description xml:lang="en">
				<paragraph>
					<text>Optional ID of the partition of the source hosting the node that implements the live connection with the underlying sensor.</text>
				</paragraph>
			</description>
		</stringParameter>
		<stringParameter name="JID" guide="JID" value="">
			<description xml:lang="en">
				<paragraph>
					<text>Optional JID of remote entity that hosts the node that implements the live connection with the underlying sensor.</text>
				</paragraph>
			</description>
		</stringParameter>
		<durationParameter name="PollingInterval" guide="Polling Interval" value="PT1H">
			<description xml:lang="en">
				<paragraph>
					<text>Interval with which to poll the sensor for data.</text>
				</paragraph>
			</description>
		</durationParameter>
		<numericalParameter name="Value" guide="Value of token" min="0" minIncluded="false">
			<description xml:lang="en">
				<paragraph>
					<text>The initial value of the token.</text>
				</paragraph>
			</description>
		</numericalParameter>
		<stringParameter name="Currency" guide="Currency" regEx="\w{3}" minLength="3" maxLength="3">
			<description xml:lang="en">
				<paragraph>
					<text>The currency of the token.</text>
				</paragraph>
			</description>
		</stringParameter>
		<numericalParameter name="CommissionPercent" guide="Commision (%)" min="0" minIncluded="true" max="100" maxIncluded="true">
			<description xml:lang="en">
				<paragraph>
					<text>The commission the Trust Provider gets for creating the token and managing the </text>
					<italic>
						<text>calculator</text>
					</italic>
					<text>.</text>
				</paragraph>
			</description>
		</numericalParameter>
		<dateParameter name="Expires" guide="Expiry date" exp="Expires&gt;Now.Date">
			<description xml:lang="en">
				<paragraph>
					<text>When token expires.</text>
				</paragraph>
			</description>
		</dateParameter>
	</parameters>
	<humanReadableText xml:lang="en">
		<section>
			<header>
				<text>Digital Sensor Twin</text>
			</header>
			<body>
				<paragraph>
					<text>This contract creates a token representing a </text>
					<italic>
						<text>digital sensor twin</text>
					</italic>
					<text> of a live sensor.</text>
				</paragraph>
				<section>
					<header>
						<text>Sensor</text>
					</header>
					<body>
						<paragraph>
							<text>The digital twin relies on data from a live sensor, integrated to the Neuron® itself, or available via a remote host (a </text>
							<italic>
								<text>concentrator</text>
							</italic>
							<text>). A sensor is addressed using up to four (4) parameters: A Node ID, a Source ID, a Partition ID and a JID. The only parameter that is required, is the Node ID. If a sensor is hosted by a remote entity, a JID (Jabber ID, or XMPP address) of the host must be provided. If the JID parameter is empty, the sensor integration has to be made on the Neuron® itself. If the node is available via a specific </text>
							<italic>
								<text>source</text>
							</italic>
							<text>, a Source ID has to be provided. A host can host nodes in multiple sources. Some hosts may host some sources that are huge, and therefore partitioned into multiple </text>
							<italic>
								<text>partitions</text>
							</italic>
							<text>. If this is the case, a Partition ID must also be provided.</text>
						</paragraph>
						<section>
							<header>
								<text>Connection parameters</text>
							</header>
							<body>
								<paragraph>
									<text>For the current node, the following live connection parameters are available:</text>
								</paragraph>
								<paragraph>
									<text>Node ID: </text>
									<bold>
										<parameter name="NodeID" />
									</bold>
								</paragraph>
								<paragraph>
									<text>Source ID: </text>
									<bold>
										<parameter name="SourceID" />
									</bold>
								</paragraph>
								<paragraph>
									<text>Partition ID: </text>
									<bold>
										<parameter name="PartitionID" />
									</bold>
								</paragraph>
								<paragraph>
									<text>JID: </text>
									<bold>
										<parameter name="JID" />
									</bold>
								</paragraph>
							</body>
						</section>
						<section>
							<header>
								<text>Connectivity</text>
							</header>
							<body>
								<paragraph>
									<text>If connectivity to the live sensor is lost, or integration removed, access to live sensor data will also be affected. The digital twin token can only log sensor data as long as the connectivity to the device is maintained.</text>
								</paragraph>
							</body>
						</section>
						<section>
							<header>
								<text>Provisioning</text>
							</header>
							<body>
								<paragraph>
									<text>Some devices are provisioned, and only provide sensor-data to authorized individuals. In such cases, the </text>
									<italic>
										<text>Owner</text>
									</italic>
									<text> of the token must be authorized read-access to the sensor data the digital twin wants to access. If the owner of the digital twin token is not authorized access, the digital twin token will not be able to log sensor data accordingly.</text>
								</paragraph>
							</body>
						</section>
					</body>
				</section>
				<section>
					<header>
						<text>Operation</text>
					</header>
					<body>
						<paragraph>
							<text>The operation of the token is divided into three categories: </text>
							<italic>
								<text>Implicit</text>
							</italic>
							<text>, </text>
							<italic>
								<text>Notes</text>
							</italic>
							<text> and </text>
							<italic>
								<text>Lifecycle</text>
							</italic>
							<text>, each described in the following subsections.</text>
						</paragraph>
						<section>
							<header>
								<text>Implicit operation</text>
							</header>
							<body>
								<paragraph>
									<text>Once the state machine belonging to the token is in an </text>
									<italic>
										<text>Active</text>
									</italic>
									<text> state, it starts to poll the sensor regularly, using the defined interval (</text>
									<parameter name="PollingInterval" />
									<text>). This polling is suspended if the state machine goes into the </text>
									<italic>
										<text>Puased</text>
									</italic>
									<text> state, but is resumed again, if set into the </text>
									<italic>
										<text>Active</text>
									</italic>
									<text> state again. This repreated polling continues until the token expires (</text>
									<parameter name="Expires" />
									<text>), or the token is manually terminated or destroyed.</text>
								</paragraph>
							</body>
						</section>
						<section>
							<header>
								<text>Operation via Notes</text>
							</header>
							<body>
								<paragraph>
									<text>The owner can add XML notes to the token, and thus control its operation. The following notes can be added (all empty XML elements with the indicated local name using the namespace </text>
									<text>https://lab.tagroot.io/Downloads/DigitalSensorTwin.xsd).</text>
								</paragraph>
								<bulletItems>
									<item>
										<text>The </text>
										<italic>
											<text>Owner</text>
										</italic>
										<text> of the token can temporarily pause the operation by adding a </text>
										<italic>
											<text>Pause</text>
										</italic>
										<text> XML note on the token.</text>
									</item>
									<item>
										<text>Resuming operation is done by adding a </text>
										<italic>
											<text>Resume</text>
										</italic>
										<text> XML note on the token.</text>
									</item>
									<item>
										<text>The </text>
										<italic>
											<text>Owner</text>
										</italic>
										<text> can also terminate the operation by adding a </text>
										<italic>
											<text>Terminate</text>
										</italic>
										<text> XML note on the token.</text>
									</item>
									<item>
										<text>The token refularly polls the sensor using the predefined interval (</text>
										<parameter name="PollingInterval" />
										<text>). The owner can request an extra-ordinarly polling of the sensor by adding a </text>
										<italic>
											<text>Poll</text>
										</italic>
										<text> XML Note.</text>
									</item>
								</bulletItems>
								<paragraph>
									<text>All notes logged on the token are kept in the ledger and viewed in the token event log.</text>
								</paragraph>
							</body>
						</section>
						<section>
							<header>
								<text>Lifecycle of token</text>
							</header>
							<body>
								<paragraph>
									<text>The token expires at </text>
									<parameter name="Expires" />
									<text>, or if the owner adds a </text>
									<italic>
										<text>Terminate</text>
									</italic>
									<text> XML note on the token. Both the </text>
									<italic>
										<text>Owner</text>
									</italic>
									<text> as well as the </text>
									<italic>
										<text>Creator</text>
									</italic>
									<text> are also authorized to destroy the token explicitly.</text>
								</paragraph>
							</body>
						</section>
					</body>
				</section>
				<section>
					<header>
						<text>Value</text>
					</header>
					<body>
						<paragraph>
							<text>The initial value of the digital sensor twin token is set to </text>
							<parameter name="Value" />
							<text> </text>
							<parameter name="Currency" />
							<text>, and is defined by the </text>
							<italic>
								<text>Creator</text>
							</italic>
							<text> in conjunction with the </text>
							<italic>
								<text>Owner</text>
							</italic>
							<text>. From this value, a </text>
							<italic>
								<text>commission</text>
							</italic>
							<text> is paid to the </text>
							<italic>
								<text>Trust Provider</text>
							</italic>
							<text> of </text>
							<parameter name="CommissionPercent" />
							<text> %.</text>
						</paragraph>
					</body>
				</section>
			</body>
		</section>
	</humanReadableText>
</contract>